subprojects {
    apply from: "${gradleScriptsPath}/v5/base-project-java8.gradle"

    task showProjectName {
        doLast {
            println "It Works ${project.name}, dependencies updated!"
        }
    }

    task refreshMyDependencies(type: Exec) {
        workingDir "${rootProject.projectDir}"
        commandLine './gradlew', "${project.name}:showProjectName", '--refresh-dependencies'
    }

    eclipseProject.dependsOn(refreshMyDependencies)

}

task printJacocoMergedTestReport() {
    doLast {
        def params = project.ext
        def excludeString = params.has('excludeJacoco') ? params['excludeJacoco'] : "#@!"
        def excludeArray = excludeString.split(",")
        println "Will ignore the subprojects which names contain: ${excludeArray}"
        println ""

        int totalUncoveredInstructions = 0
        int totalNumberInstructions = 0
        subprojects {
            def name = project.name
            boolean shouldCount = true
            for (String excluded : excludeArray) {
                if (name.contains(excluded)) {
                    println "Ignoring coverage results for subproject: ${name}"
                    println ""
                    shouldCount = false
                    break
                }
            }
            if (shouldCount) {
                File subJacocoReport = new File("${project.projectDir}/build/reports/jacoco/test/html/index.html")
                if (subJacocoReport) {
                    def parsedReport = subJacocoReport.text
                            .find("Total</td><td class=\"bar\">(.*?) of (.*?)</td>")
                            .replace("Total</td><td class=\"bar\">", "")
                            .replace("</td>", "")
                            .replace(",", "")

                    def (uncoveredInstructionsStr, numberInstructionsStr) = parsedReport.tokenize(" of ")

                    def uncovInt = uncoveredInstructionsStr.toInteger()
                    def numInt = numberInstructionsStr.toInteger()

                    totalUncoveredInstructions += uncovInt
                    totalNumberInstructions += numInt

                    println "${name}\'s number of instructions: ${numberInstructionsStr}"
                    println "${name}\'s number of uncovered instructions: ${uncoveredInstructionsStr}"
                    if (numInt > 0) {
                        double cc = (100 * (1 - (uncovInt / numInt)))
                        println "${name}\'s code coverage: ${cc}%"
                    }
                    println ""
                } else {
                    throw new GradleException("${name} does not have a JaCoCo test report, this may be due to a lack of a \'test\' source set")
                }
            }
        }
        def total = (100 * (1 - totalUncoveredInstructions / totalNumberInstructions)).toInteger()
        println ">>>>>>>>>> TOTALS"
        println "${rootProject.name}\'s number of instructions: ${totalNumberInstructions}"
        println "${rootProject.name}\'s number of uncovered instructions: ${totalUncoveredInstructions}"
        println "Code covered by tests: ${total}%"
    }
}